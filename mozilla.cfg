// mozilla.cfg file needs to start with a comment line

// mozilla.cfg file is sandboxed by default i.e. can't use the Components object
// disable the sandbox by setting the general.config.sandbox_enabled pref to false

// run userChrome.js example.uc.js example.as.css example.css files in chrome folder
// do not run userChrome.css userContent.css example.js files in chrome folder

// browser-delayed-startup-finished topic supports the browser window only

// Firefox 68 uses the browser.xul page
// Firefox 69 uses the browser.xhtml page

Components.utils.import("resource://gre/modules/Services.jsm");
Services.obs.addObserver(function (aSubject, aTopic, aData) {
  var chromeWindow = aSubject;
  chromeWindow.setTimeout(function () {
    try {
      if (chromeWindow.userChromeJsMod) return;
      chromeWindow.userChromeJsMod = true;
      var chromeFiles = chromeWindow.FileUtils.getDir("UChrm", []).directoryEntries;
      var sss = Components.classes["@mozilla.org/content/style-sheet-service;1"].
        getService(Components.interfaces.nsIStyleSheetService);
      while (chromeFiles.hasMoreElements()) {
        var file = chromeFiles.getNext().QueryInterface(Components.interfaces.nsIFile);
        var fileURI = Services.io.newFileURI(file);
        if (file.isFile()) {
          if (/(^userChrome|\.uc)\.js$/i.test(file.leafName)) {
            Services.scriptloader.loadSubScriptWithOptions(fileURI.spec, {
              target: chromeWindow,
              charset: "UTF-8",
              ignoreCache: true,
            });
          } else if (/\.as\.css$/i.test(file.leafName)) {
            if (!sss.sheetRegistered(fileURI, sss.AGENT_SHEET)) {
              sss.loadAndRegisterSheet(fileURI, sss.AGENT_SHEET);
            }
          } else if (/^(?!(userChrome|userContent)\.css$).+\.css$/i.test(file.leafName)) {
            if (!sss.sheetRegistered(fileURI, sss.USER_SHEET)) {
              sss.loadAndRegisterSheet(fileURI, sss.USER_SHEET);
            }
          }
        }
      }
    } catch (e) {
      Components.utils.reportError(e); // [check] Show Content Messages
    }
  }, 10);
}, "browser-delayed-startup-finished", false);